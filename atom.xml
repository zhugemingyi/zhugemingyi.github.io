<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>First Try</title>
  
  
  <link href="https://zhugemingyi.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhugemingyi.github.io/"/>
  <updated>2021-07-07T06:30:55.366Z</updated>
  <id>https://zhugemingyi.github.io/</id>
  
  <author>
    <name>zhugemingyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python查找算法</title>
    <link href="https://zhugemingyi.github.io/2021/07/07/python%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>https://zhugemingyi.github.io/2021/07/07/python%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</id>
    <published>2021-07-07T02:33:55.000Z</published>
    <updated>2021-07-07T06:30:55.366Z</updated>
    
    <content type="html"><![CDATA[<ul><li>二分查找</li></ul><span id="more"></span><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 返回 x 在 arr 中的索引，如果不存在返回 -1</span><span class="token keyword">def</span> <span class="token function">binarySearch</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 基本判断</span>    <span class="token keyword">if</span> r <span class="token operator">>=</span> l<span class="token punctuation">:</span>         mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 元素整好的中间位置</span>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">:</span>             <span class="token keyword">return</span> mid         <span class="token comment"># 元素小于中间位置的元素，只需要再比较左边的元素</span>        <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">:</span>             <span class="token keyword">return</span> binarySearch<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>         <span class="token comment"># 元素大于中间位置的元素，只需要再比较右边的元素</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> binarySearch<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token comment"># 不存在</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/python%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/Binary_search_into_array.png" alt="Binary_search_into_array"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.runoob.com/python3/python-binary-search.html">https://www.runoob.com/python3/python-binary-search.html</a></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="https://zhugemingyi.github.io/categories/python/"/>
    
    <category term="数据结构" scheme="https://zhugemingyi.github.io/categories/python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="查找算法" scheme="https://zhugemingyi.github.io/categories/python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="https://zhugemingyi.github.io/tags/python/"/>
    
    <category term="数据结构" scheme="https://zhugemingyi.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>python排序算法</title>
    <link href="https://zhugemingyi.github.io/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://zhugemingyi.github.io/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2021-07-05T01:19:10.000Z</published>
    <updated>2021-07-07T06:30:41.940Z</updated>
    
    <content type="html"><![CDATA[<ul><li>快速排序</li><li>冒泡排序</li><li>归并排序</li><li>希尔排序</li><li>排序算法复杂度总结</li></ul><span id="more"></span><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment"># 遍历所有数组元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Last i elements are already in place</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>快速排序使用分治法策略来把一个序列分为较小和较大的2个子序列，然后递归地排序两个子序列。</p><p>步骤为：</p><!--more--><ul><li>挑选基准值：从数列中挑出一个元素，称为”基准”;</li><li>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成;</li><li>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ul><p>递归到最底部的判断条件是数列的大小是零或一，此时该数列显然已经有序。</p><p>选取基准值有数种具体方法，此选取方法对排序的时间性能有决定性影响。</p><p><img src="/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quickSort.gif" alt="quickSort"></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment"># 遍历所有数组元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Last i elements are already in place</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>冒泡排序重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><p><img src="/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/bubbleSort.gif" alt="bubbleSort"></p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>     largest <span class="token operator">=</span> i      l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>     <span class="token comment"># left = 2*i + 1 </span>    r <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>     <span class="token comment"># right = 2*i + 2 </span>    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>         largest <span class="token operator">=</span> l     <span class="token keyword">if</span> r <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>         largest <span class="token operator">=</span> r     <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>         arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 交换</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># main</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>     <span class="token comment"># Build a maxheap. </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>     <span class="token comment"># 一个个交换元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>   <span class="token comment"># 交换</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。</p><p><img src="/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/heapSort.gif" alt="heapSort"></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>     n1 <span class="token operator">=</span> m <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span>    n2 <span class="token operator">=</span> r<span class="token operator">-</span> m     <span class="token comment"># 创建临时数组</span>    L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n1<span class="token punctuation">)</span>    R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n2<span class="token punctuation">)</span>    <span class="token comment"># 拷贝数据到临时数组 arrays L[] 和 R[] </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">:</span>         L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l <span class="token operator">+</span> i<span class="token punctuation">]</span>     <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>         R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> j<span class="token punctuation">]</span>     <span class="token comment"># 归并临时数组到 arr[l..r] </span>    i <span class="token operator">=</span> <span class="token number">0</span>     <span class="token comment"># 初始化第一个子数组的索引</span>    j <span class="token operator">=</span> <span class="token number">0</span>     <span class="token comment"># 初始化第二个子数组的索引</span>    k <span class="token operator">=</span> l     <span class="token comment"># 初始归并子数组的索引</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n1 <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n2 <span class="token punctuation">:</span>         <span class="token keyword">if</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>             arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span>             i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span>             j <span class="token operator">+=</span> <span class="token number">1</span>        k <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 拷贝 L[] 的保留元素</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">:</span>         arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span>         i <span class="token operator">+=</span> <span class="token number">1</span>        k <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 拷贝 R[] 的保留元素</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">:</span>         arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span>         j <span class="token operator">+=</span> <span class="token number">1</span>        k <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># eg:mergeSort(arr,0,len(arr)-1)</span>    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>         m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        mergeSort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span>         mergeSort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>         merge<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>归并排序是创建在归并操作上的一种有效的排序算法。该算法是采用分治法（的一个非常典型的应用。</p><p>分治法:</p><ul><li>分割：递归地把当前序列平均分割成两半。</li><li>集成：在保持元素顺序的同时将上一步得到的子序列集成到一起（归并）。</li></ul><p><img src="/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/mergeSort.gif" alt="mergeSort"></p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>     n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    gap <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>             temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>             j <span class="token operator">=</span> i             <span class="token keyword">while</span>  j <span class="token operator">>=</span> gap <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span>temp<span class="token punctuation">:</span>                 arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span>                 j <span class="token operator">-=</span> gap             arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp         gap <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gap<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p><p><img src="/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/Sorting_shellsort_anim.gif" alt="Sorting_shellsort_anim"></p><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><h1 id="排序算法复杂度总结"><a href="#排序算法复杂度总结" class="headerlink" title="排序算法复杂度总结"></a>排序算法复杂度总结</h1><p><img src="/2021/07/05/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93.png" alt="排序算法复杂度总结"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.runoob.com/python3/python-quicksort.html">https://www.runoob.com/python3/python-quicksort.html</a></p><p><a href="https://www.runoob.com/python3/python-bubble-sort.html">https://www.runoob.com/python3/python-bubble-sort.html</a></p><p><a href="https://www.runoob.com/python3/python-heap-sort.html">https://www.runoob.com/python3/python-heap-sort.html</a></p><p><a href="https://www.runoob.com/python3/python-merge-sort.html">https://www.runoob.com/python3/python-merge-sort.html</a></p><p><a href="https://www.runoob.com/python3/python-shellsort.html">https://www.runoob.com/python3/python-shellsort.html</a></p><p><a href="https://blog.csdn.net/z_feng12489/article/details/94634897">https://blog.csdn.net/z_feng12489/article/details/94634897</a>    shellsort</p><p><a href="https://blog.csdn.net/str_lyc/article/details/109273738">https://blog.csdn.net/str_lyc/article/details/109273738</a>    总结</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;希尔排序&lt;/li&gt;
&lt;li&gt;排序算法复杂度总结&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="https://zhugemingyi.github.io/categories/python/"/>
    
    <category term="数据结构" scheme="https://zhugemingyi.github.io/categories/python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="排序算法" scheme="https://zhugemingyi.github.io/categories/python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="https://zhugemingyi.github.io/tags/python/"/>
    
    <category term="数据结构" scheme="https://zhugemingyi.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
